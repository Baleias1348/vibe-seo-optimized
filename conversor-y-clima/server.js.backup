import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import fetch from 'node-fetch';
import path from 'path';
import { fileURLToPath } from 'url';

// Configuración de rutas de archivo ES Modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Cargar variables de entorno
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// Configuración de CORS
const corsOptions = {
  origin: '*',
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  preflightContinue: false,
  optionsSuccessStatus: 204
};

// Middleware
app.use(cors(corsOptions));
app.use(express.json());

// Configuración de CSP
app.use((req, res, next) => {
  // Configuración de CSP más permisiva para desarrollo
  const csp = [
    "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval'",
    "script-src 'self' 'unsafe-inline' 'unsafe-eval' https:",
    "style-src 'self' 'unsafe-inline' https: data:",
    "font-src 'self' https: data: 'unsafe-inline'",
    "img-src 'self' https: data: blob:",
    "connect-src 'self' https: ws: wss:",
    "frame-src 'self' https: data:",
    "media-src 'self' https: data:",
    "object-src 'none'"
  ].join('; ');
  
  // Configurar los encabezados de seguridad
  res.setHeader('Content-Security-Policy', csp);
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('X-Frame-Options', 'SAMEORIGIN');
  res.setHeader('X-XSS-Protection', '1; mode=block');
  
  next();
});

// Ruta para buscar restaurantes cercanos
app.get('/api/places/nearbysearch', async (req, res) => {
  try {
    const { location, radius = 5000, type = 'restaurant' } = req.query;
    const apiKey = process.env.VITE_GOOGLE_PLACES_API_KEY;
    
    if (!apiKey || apiKey === 'TU_CLAVE_DE_GOOGLE_PLACES_AQUI') {
      return res.status(400).json({ 
        error: 'No se ha configurado la clave de Google Places API' 
      });
    }
    
    const url = new URL('https://places.googleapis.com/v1/places:searchNearby');
    
    const requestBody = {
      includedTypes: [type],
      maxResultCount: 20,
      locationRestriction: {
        circle: {
          center: {
            latitude: parseFloat(location.split(',')[0]),
            longitude: parseFloat(location.split(',')[1])
          },
          radius: parseFloat(radius)
        }
      }
    };

    const apiResponse = await fetch(url.toString(), {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Goog-Api-Key': apiKey,
        'X-Goog-FieldMask': 'places.displayName,places.formattedAddress,places.rating,places.userRatingCount,places.photos,places.id,places.types'
      },
      body: JSON.stringify(requestBody)
    });
    
    const data = await apiResponse.json();
    
    // Transformar la respuesta al formato esperado por el frontend
    const transformedData = {
      results: data.places ? data.places.map(place => ({
        place_id: place.id,
        name: place.displayName?.text || 'Sin nombre',
        vicinity: place.formattedAddress || 'Dirección no disponible',
        rating: place.rating || 0,
        user_ratings_total: place.userRatingCount || 0,
        photos: place.photos ? place.photos.map(photo => ({
          photo_reference: photo.name.split('/').pop()
        })) : []
      })) : [],
      status: 'OK'
    };
    
    res.json(transformedData);
  } catch (error) {
    console.error('Error en la búsqueda de lugares:', error);
    res.status(500).json({ error: 'Error al buscar lugares cercanos' });
  }
});

// Ruta para obtener detalles de un lugar
app.get('/api/places/details/:placeId', async (req, res) => {
  try {
    const { placeId } = req.params;
    const apiKey = process.env.VITE_GOOGLE_PLACES_API_KEY;
    
    if (!apiKey || apiKey === 'TU_CLAVE_DE_GOOGLE_PLACES_AQUI') {
      return res.status(400).json({ 
        error: 'No se ha configurado la clave de Google Places API' 
      });
    }
    
    const url = new URL(`https://maps.googleapis.com/maps/api/place/details/json`);
    url.searchParams.append('place_id', placeId);
    url.searchParams.append('key', apiKey);
    url.searchParams.append('fields', 'name,formatted_address,formatted_phone_number,website,opening_hours,geometry,rating,user_ratings_total,photos,vicinity');
    
    const response = await fetch(url.toString());
    const data = await response.json();
    
    res.json(data);
  } catch (error) {
    console.error('Error al obtener detalles del lugar:', error);
    res.status(500).json({ error: 'Error al obtener detalles del lugar' });
  }
});

// Ruta para obtener fotos de lugares (proxy para evitar problemas de CORS)
app.get('/api/places/photo', async (req, res) => {
  try {
    const { photo_reference, maxwidth = '400' } = req.query;
    const apiKey = process.env.VITE_GOOGLE_PLACES_API_KEY;
    
    if (!photo_reference) {
      return res.status(400).json({ error: 'Se requiere el parámetro photo_reference' });
    }
    
    if (!apiKey || apiKey === 'TU_CLAVE_DE_GOOGLE_PLACES_AQUI') {
      return res.status(400).json({ 
        error: 'No se ha configurado la clave de Google Places API' 
      });
    }
    
    const url = new URL('https://maps.googleapis.com/maps/api/place/photo');
    url.searchParams.append('photoreference', photo_reference);
    url.searchParams.append('maxwidth', maxwidth);
    url.searchParams.append('key', apiKey);
    
    // Redirigir la solicitud a la API de Google
    const response = await fetch(url.toString(), { redirect: 'manual' });
    
    if (response.status === 302) {
      // Si la respuesta es una redirección, obtener la URL de la imagen
      const imageUrl = response.headers.get('location');
      if (imageUrl) {
        // Obtener la imagen y enviarla como respuesta
        const imageResponse = await fetch(imageUrl);
        const imageBuffer = await imageResponse.buffer();
        
        // Establecer las cabeceras adecuadas
        res.setHeader('Content-Type', imageResponse.headers.get('content-type'));
        res.setHeader('Cache-Control', 'public, max-age=31536000'); // Cachear por 1 año
        
        // Enviar la imagen
        return res.send(imageBuffer);
      }
    }
    
    // Si hay algún error, devolver una imagen de marcador de posición
    res.redirect('https://via.placeholder.com/400x300?text=Imagen+no+disponible');
  } catch (error) {
    console.error('Error al obtener la foto del lugar:', error);
    res.redirect('https://via.placeholder.com/400x300?text=Error+cargando+imagen');
  }
});

// Servir archivos estáticos en producción
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, 'dist')));
}

// Manejar rutas de la aplicación React (debe ir al final, después de las rutas de API)
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

// Iniciar el servidor
app.listen(PORT, () => {
  console.log(`Servidor corriendo en http://localhost:${PORT}`);
});

// Manejo de errores
process.on('unhandledRejection', (err) => {
  console.error('Error no manejado:', err);
  app.close(() => process.exit(1));
  server.close(() => process.exit(1));
});

export default server;
